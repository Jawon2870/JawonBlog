<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nodejs express github zeabur免费部署云函数</title>
      <link href="/2023/10/12/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/%E4%BA%91%E5%87%BD%E6%95%B0%E6%90%AD%E5%BB%BA/nodejs%20express%20github%20zeabur%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2%E4%BA%91%E5%87%BD%E6%95%B0/"/>
      <url>/2023/10/12/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/%E4%BA%91%E5%87%BD%E6%95%B0%E6%90%AD%E5%BB%BA/nodejs%20express%20github%20zeabur%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2%E4%BA%91%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1>简介</h1><p>​<a href="https://dash.zeabur.com">Zeabur</a> 支持免费部署网站和云函数，相当于一个服务器，我们可以免费部署自己的应用，让他在云端运行，而不是简单的静态网站。由于我已经部署了静态网站 <a href="https://www.jawon.site">Jawon’s blog</a> ,后来才有了云函数的需求，因此下面是云函数的部署步骤。</p><blockquote><p>zeabur 和 vercel 、 Netlify 类似，都可以搭建网站和云函数，但由于他们在国内都被墙了，目前只有zeabur 搭建后的提供的 xxx.zeabur.app 在国内仍可访问，因此选用zeabur。</p></blockquote><h1>云函数部署</h1><h2 id="创建GitHub仓库">创建GitHub仓库</h2><p>​在GitHub创建自己的仓库用于存放云应用，后面再部署到zeabur。仓库最好使用ssh连接到本地，方便后期推送代码，详细步骤请参考 <a href="https://www.cnblogs.com/wangcuican/p/12522239.html">提交本地代码到github</a></p><h2 id="创建本地项目">创建本地项目</h2><p>​本着不重复造轮子的原则，这里使用基于nodejs的express服务器框架。环境配置参考： <a href="https://expressjs.com/en/starter/installing.html">Installing Express (expressjs.com)</a></p><p>​配置好环境后，文件夹内会出现一些文件，在package.json内我们只需保留：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"node app.js"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"^4.18.2"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​其中&quot;start&quot;: &quot;node app.js&quot;是告诉zeabur服务器部署后执行node app.js命令。</p><p>​之后按照 <a href="https://expressjs.com/en/starter/hello-world.html">Express “Hello World” example (expressjs.com)</a> 创建app.js，将其中的端口改为8080，否则部署到zeabur后无效(别问我是怎么知道的😢 💢)。</p><p>​这时在本地运行node app.js后，打开 <a href="http://localhost:8080/">http://localhost:8080/</a> 可以看到hello word。</p><h2 id="推送到github">推送到github</h2><p>​如果你按照<a href="https://www.cnblogs.com/wangcuican/p/12522239.html">提交本地代码到github</a> 部署好ssh后，可以使用</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">git add . &amp;&amp; git commit -m &#39;1&#39; &amp;&amp; git push -u myapp master:main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​若后期要更改本地路径，需要到目标路径打开 bash，执行以下命令</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">git init git remote add NewRepositoryName NewHHSLinkgit add .git commit -m &#39;first commit&#39;git push --force NewRepositoryName master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​其中 --force 表示强制推送覆盖仓库。</p><p>推送代码，其中的 myapp master:main 因人而异。</p><blockquote><p>如果没有部署ssh，将除node_modules文件夹外的所有文件手动上传到仓库也是可以的。</p></blockquote><h2 id="创建zeabur服务">创建zeabur服务</h2><p>​注册<a href="https://dash.zeabur.com">Zeabur</a> ，创建服务，连接你的github，选择目标仓库即可一键部署。之后在该服务中可以为服务添加域名xxx.zeabur.app，访问该域名即可看到Hello Word，搭建成功。</p><h2 id="编写云函数">编写云函数</h2><p>​仅仅显示Hello Word显然不是我要的结果，我要的是一个实时运行的云函数，当我访问他时他要返回计算结果。</p><p>​为了代码模块化，我们新创建一个func.js作为云函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​这个函数返回一个数组，该数组每隔五秒会自动增加一个成员，用以证明云函数在无人访问时也可以运行。</p><p>​之后在app.js中调用该函数，同时当收到get请求时返回该数组：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./func'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">应用正在监听端口 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将其重新部署后，访问网页可以看到 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14, . . . ，并随着时间增多。关闭网页，过一会再打开可以看到数字更多了，说明云函数成功运行。</p><h2 id="get请求的参数解析">get请求的参数解析</h2><p>​云函数可以响应浏览器输入请求地址，也可以响应js的get请求。为了实现在请求地址中加入不同的参数来获取不同的返回值，我们将app.js改为以下内容，方便实验：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">8080</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> key <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>key<span class="token punctuation">;</span>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'你的请求参数是：'</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">应用正在监听端口 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是当我们请求地址<a href="http://127.0.0.1:8080/?key=123%EF%BC%8C%E5%B0%B1%E4%BC%9A%E8%BF%94%E5%9B%9E">http://127.0.0.1:8080/?key=123，就会返回</a> 你的请求参数是：123</p><p>使用js发送get请求，打印返回结果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8080/?key=123'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 你的请求参数是：123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：get请求不可跨域</p></blockquote><p>我们可以在服务端对请求参数进行判断从而执行不同的逻辑，进而返回不同的结果，下面是具体代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 单参数的get请求 http://localhost:8080/?key=value</span><span class="token comment">//const key = req.query.key;</span><span class="token comment">//res.send('你的请求参数是：' + key);</span><span class="token comment">// 多参数的get请求 http://localhost:8080/?key1=value1&amp;key2=value2</span><span class="token comment">//const &#123; key1, key2 &#125; = req.query;</span><span class="token comment">//res.send('你的请求参数是：' + key1 + ',' + key2);</span><span class="token comment">// 遍历所有请求参数 http://127.0.0.1:8080/?key1=111&amp;key2=222&amp;key3=333</span><span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> req<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    params <span class="token operator">+=</span> key <span class="token operator">+</span> <span class="token string">' = '</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>query<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'你的请求参数是：\n'</span> <span class="token operator">+</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网站搭建 </category>
          
          <category> 云函数搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo matery git gitee pages免费部署静态网站</title>
      <link href="/2023/08/21/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/gitee%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hexo%20matery%20git%20gitee%20pages%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/"/>
      <url>/2023/08/21/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/gitee%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/hexo%20matery%20git%20gitee%20pages%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1>搭建参考</h1><p>​搭建这个博客我都参考了以下资料，虽然搭建的过程中遇到很多的问题，但都是可以通过查阅资料解决的，可以说搭建这个静态博客只是个时间问题。</p><h2 id="B站教程">B站教程</h2><p>​UP主&quot;DID 迪&quot;的视频教程，演示了使用hexo + matery + git + github从零到一搭建一个博客，对我帮助非常大，我已经将他和另一位UP主放入我的友链啦！</p><p>视频地址： <a href="https://www.bilibili.com/video/BV1Eg41157tL/?spm_id_from=333.999.top_right_bar_window_history.content.click&amp;vd_source=866132c04f0a5e79ea65e139473f969c">教程]Hexo &amp; Github搭建自己的专属博客_哔哩哔哩_bilibili</a></p><p>他的博客： <a href="https://did321.gitee.io/">WD’s blog (gitee.io)</a></p><h2 id="CSDN教程">CSDN教程</h2><p>​“前端开心果” 在CDSN发布了将 hexo部署到gitee pages的图文教程，非常详细。 <a href="https://blog.csdn.net/qq_38157825/article/details/112783631?ops_request_misc=&amp;request_id=b65d2bb25b00439cb27d6b02400a6dc7&amp;biz_id=&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~koosearch~default-1-112783631-null-null.268%5Ev1%5Econtrol&amp;utm_term=hexo&amp;spm=1018.2226.3001.4450">Hexo 部署到 Gitee_hexo gitee_前端开心果的博客-CSDN博客</a></p><p>他的博客：<a href="https://dulily.gitee.io/">https://dulily.gitee.io/</a></p><h2 id="Hexo-和-matery官方文档">Hexo 和 matery官方文档</h2><p>​在配置编辑博客内容和修改博客样式的过程中查阅官方资料是很有用的。</p><p>Hexo官网： <a href="https://hexo.io/zh-cn/">Hexo</a></p><p>matery官网：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><h2 id="其他工具">其他工具</h2><p>Google</p><p>bing AI  <a href="https://www.bing.com/search?q=Bing+AI&amp;showconv=1&amp;FORM=hpcodx">Bing AI - 搜索</a> （需要梯子和微软账号），他现在集成了GPT4，而且免费，帮我写了不少代码。</p><p>VSCode，目前用过最好的编辑器。</p><h1>总结</h1><p>​整个过程大部分时间都用在编辑博客内容和修改样式了，都是一些基本的html、css、js，总共耗时一星期左右。遇到解决不了问题的就去google搜、去问bing AI、去查官方文档，总会解决的。</p>]]></content>
      
      
      <categories>
          
          <category> 网站搭建 </category>
          
          <category> gitee静态网站搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法总结</title>
      <link href="/2023/08/14/MarkDown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/MarkDown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2023/08/14/MarkDown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/MarkDown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1>软件配置</h1><blockquote><p>曾经放弃过Typora，但兜兜转转，最后还得是Typora！</p></blockquote><h2 id="1-修改样式">1.修改样式</h2><h3 id="1-1、导入主题文件">1.1、导入主题文件</h3><h4 id="github-dark-css">github-dark.css</h4><p>​在文件-&gt;偏好设置-&gt;外观-&gt;打开主题文件夹，将github-dark.css 放入该文件夹内后重启软件即可。</p><h3 id="1-2、导入我修改好的样式">1.2、导入我修改好的样式</h3><h4 id="setting-dist文件夹">setting-dist文件夹</h4><p>​用 setting-dist 文件夹替换 Typora安装路径\resources\app\setting-dist</p><h4 id="base-control-css">base-control.css</h4><p>​用base-control.css替换 Typora安装路径\resources\app\style\base-control.css</p><h3 id="1-3、自定义样式">1.3、自定义样式</h3><p>​在视图-&gt;开发者工具(shift+F12) 调试好css样式后，在调试窗口打开修改好的css文件，右键save as，保存并覆盖 Typora\resources\app\style\themes（有的可能在其他文件夹，例如Typora\resources\app\style\base-control.css）。</p><h2 id="2-大纲折叠">2.大纲折叠</h2><p>​点击 文件–&gt;偏好设置–&gt;外观–&gt;侧边栏</p><h2 id="3-修改快捷键">3. 修改快捷键</h2><p>​进入 文件-&gt;偏好设置-&gt;通用-&gt;打开高级设置，修改conf.user.json即可。</p><blockquote><p>C:\Users\用户名\AppData\Roaming\Typora\conf\conf.user.json</p></blockquote><blockquote><p>参考 快捷键函数表.PDF</p></blockquote><p><strong>注意：只能修改或添加 conf.user.json，不能修改 conf.default.json</strong></p><h1>文字样式</h1><h2 id="标题-空格-标题">标题 (#~######+空格+标题)</h2><p># 标题 1</p><p>## 标题 2</p><p>### 标题 3</p><p>#### 标题 4</p><p>##### 标题 5</p><p>###### 标题 6</p><h2 id="下划线">下划线</h2><p>&lt;u&gt;<u>下划线</u>&lt;/u&gt;</p><h2 id="斜体">斜体</h2><p>*<em>斜体</em>*</p><h2 id="强调">强调</h2><p>**<strong>强调</strong>**</p><h2 id="已删除">已删除</h2><p>~~<s>已删除</s>~~</p><h2 id="框起来">框起来</h2><p>`<code>框起来</code>`</p><h2 id="脚注">脚注</h2><p>脚注<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h2 id="高亮">高亮</h2><blockquote><p>注意：高亮、图表、内联公式、上下角标需要在偏好设置中的 Markdown 拓展语法中打开并重启 Typora</p></blockquote><p>==<mark>高亮</mark>==</p><h2 id="上下角标">上下角标</h2><p>^1^ 上角标<sup>1</sup></p><p>~1~ 下角标<sub>1</sub></p><h2 id="转义">转义</h2><p>\反斜杠</p><h2 id="分割线">分割线</h2><p>—或***</p><hr><hr><h1>列表样式</h1><h2 id="有序列表：">有序列表：</h2><p>数字.空格…</p><ol><li>…</li><li>…</li><li>…</li></ol><h2 id="无序列表：">无序列表：</h2><p>三种方式：+空格、-空格、*空格 ，Tap 键缩进 ，shift + Tap 取消缩进</p><ul><li>。。。。。</li><li>。。。。。<ul><li>。。。。。</li><li>。。。。。</li></ul></li><li>。。。。</li></ul><h2 id="待办列表">待办列表 :</h2><p>-空格[空格]空格</p><ul><li>[x] 待办一</li><li>[ ] 待办二</li></ul><h1>插入元素</h1><h2 id="插入图片：">插入图片：</h2><p>直接拖入，即 ![tip](url) ：</p><p><img src="view.jpg" alt=""></p><p>使用 html 中 img 标签的方式：&lt;img src=“view.jpg” alt=“view”/&gt;</p><img src="view.jpg" alt="view"/><h2 id="插入表格：">插入表格：</h2><p>|空格|空格|空格|回车</p><blockquote><p>建议右键插入，然后修改源码</p></blockquote><table><thead><tr><th style="text-align:center">。。。。</th><th style="text-align:left">。。。</th><th style="text-align:right">。。。</th></tr></thead><tbody><tr><td style="text-align:center">。。</td><td style="text-align:left">。。</td><td style="text-align:right">。。</td></tr></tbody></table><h2 id="插入链接：">插入链接：</h2><p><a href="https://www.baidu.com">百度</a> [百度](<a href="https://www.baidu.com">https://www.baidu.com</a>)</p><h2 id="插入公式：">插入公式：</h2><p>$公式$<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mo>=</mo><msup><mi>z</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">(x^2+y^2)/2=z^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p><p>$$居中的公式$$</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mo>=</mo><msup><mi>z</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">(x^2+y^2)/2=z^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="插入代码：">插入代码：</h2><p>~~~回车</p><p>C:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello word!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JS:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Search</span>  <span class="token keyword">var</span> $searchWrap <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#search-form-wrap'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    isSearchAnim <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    searchAnimDuration <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token function-variable function">startSearchAnim</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    isSearchAnim <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token function-variable function">stopMobileNavAnim</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      isMobileNavAnim <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> mobileNavAnimDuration<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#wrap'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isMobileNavAnim <span class="token operator">||</span> <span class="token operator">!</span>$container<span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'mobile-nav-on'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    $container<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'mobile-nav-on'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入表情：">插入表情：</h2><p>:关键词: (<a href="https://gist.github.com/rxaviers/7360908">支持的关键词</a>)</p><p>:smile: 😄，:sunny: ☀️，:rose: 🌹</p><h2 id="插入引用：">插入引用：</h2><p>&gt;空格</p><blockquote><p>引用内容</p><blockquote><p>二级引用</p></blockquote></blockquote><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>这是一个脚注解释 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> MarkDown语法总结 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
